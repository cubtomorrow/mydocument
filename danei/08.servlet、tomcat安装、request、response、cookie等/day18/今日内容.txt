过滤器
一、过滤器概述
1、什么是过滤器
	过滤器、监听器、Servlet这三门技术统称为JavaWeb的三大组件
	Servlet： 接收客户端的请求并处理，最后再做出回应
	过滤器：对客户端的请求进行拦截处理
	监听器：对某一个对象（的状态变化）进行监听

	过滤器也叫做Filter, 通过过滤器可以实现用户在访问某一个资源请求之前或者之后, 对发送的请求和响应进行拦截处理. 从而来做一些相关的处理, 比如判断用户是否登陆, 权限控制, 或者全站乱码处理.

	总结:
	(1)所谓的过滤器其实就是拦截用户对资源的访问
	(2)一个过滤器可以拦截多个资源, 一个资源也可以配置被多个过滤器所拦截
	(3)所谓的拦截其实就是将代表请求的request对象, 和代表响应的Response对象拦截下来, 进行相关的处理!
		
二、开发过滤器
1、开发过滤器的步骤: 
	(1)写一个类, 实现一个Filter接口, 并添加未实现的方法
	(2)需要在web.xml文件中配置过滤器所拦截的路径

2、案例1： 配置一个过滤器判断用户输入的暗号是否正确

3、案例2： 在案例1的基础上, 再配置一个过滤器判断用户输入的第2个暗号是否正确

4、配置过滤器
	<!-- 配置过滤器所拦截的路径 -->
	<filter>
		<filter-name>FilterDemo1</filter-name>
		<filter-class>com.tedu.filter.FilterDemo1</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>FilterDemo1</filter-name>
		<!-- 配置过滤器所拦截的路径
			这个配置决定了有哪些资源的访问将会被拦截
		 -->
		<url-pattern>/ServletDemo1</url-pattern>
		<url-pattern>/ServletDemo2</url-pattern>
		<url-pattern>/ServletDemo3</url-pattern>
		<url-pattern>/*</url-pattern>
		<url-pattern>*.html</url-pattern>
		<url-pattern>*.jsp</url-pattern>
	</filter-mapping>
	
三、过滤器中的方法
1.过滤器中的方法介绍
	1) init方法 -- 在Filter实例创建之后立即执行, 进行初始化的操作!
		在Web应用加载后, 会创建出所有的Filter实例.

	2) doFilter -- 对过滤器所拦截到的请求进行处理的方法
		如果处理完后, 符合条件, 需要放行过滤器接着执行后面的资源, 放行过滤器只需要一行代码:
		chain.doFilter(request, response);

	3) destroy方法 -- 在Filter实例销毁之前立即执行, 进行善后处理的操作
		在服务器关闭, 或者Web应用被移出容器, 随着Web应用的销毁, Filter实例也会跟着销毁, 在销毁之前执行destroy方法
	
2.Filter的生命周期(了解!)	
	当服务器启动时，web应用加载后会立即创建出当前web应用中的所有的Filter对象，创建出来后，立即调用init方法进行初始化出操作. 从此以后这个Filter对象一直驻留在服务器的内存中, 为后续所拦截的请求服务，每次过滤到对资源的访问时，都会执行doFilter这个方法进行拦截处理，直到服务器关闭或者web应用移出容器为止，随着web应用的销毁，过滤器实例也跟着销毁，在销毁之前会调用destroy方法执行善后的处理.
	
监听器
一、监听器概述
1.什么是监听器:
	监听器一般是一个实现特定(监听器)接口的Java程序, 这个程序(的作用是) 通常会监听另外一个Java对象的属性状态变化(对象创建、销毁、对象中属性的变化)，当上述对象的状态发生变化时，就会通知监听器， 监听器就会调用特定的方法来处理。
	
2.案例: GUI(图形界面编程)

3.监听器的特点:
	(1)监听器通常是一个接口, 需要开发人员自己来实现
	(2)需要将监听器注册到事件源上
	(3)监听器中的方法需要开发人员自己实现
	
二、开发监听器
1.JavaWeb中的监听器(八个)
	
2.案例: 实现ServletContextListener监听器, 监听ServletContext对象的生和死.

	
